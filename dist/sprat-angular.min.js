angular.module("springDataRest",[]).directive("springDataRest",function(){return{restrict:"E",transclude:!0,scope:{promiseFactory:"=",url:"=url",refSort:"=sort",refParams:"=params",size:"=size",refCollection:"=collection",refItems:"=items",disableInit:"=",listenerId:"@"},link:function(scope,element,attrs){attrs.$observe("init",function(){scope.init=scope.$eval(attrs.init)}),attrs.listenerId&&scope.$on(attrs.listenerId+":reload",function(){scope.reload()})},controller:["$scope","$http",function($scope,$http){function activate(){$scope.disableInit||vm.load($scope.currentPage)}var vm=this;$scope.pages=[],$scope.currentPage="0",$scope.extractContent=!1,$scope.first=function(){vm.load(0)},$scope.last=function(){vm.load($scope.refCollection.page.totalPages-1)},$scope.page=function(page){vm.load(page)},$scope.previous=function(){vm.load(vm.currentPage()-1)},$scope.next=function(){vm.load(vm.currentPage()+1)},$scope.reload=function(){vm.reload()};var defaultPromiseFactory=function(sortParameters,customParameters){if(!$scope.url)throw"You must at least provide url='' parameter or a find='' callback with a method reference";return angular.merge(opts,sortParameters||{}),$http.get($scope.url,{params:opts}).then(function(response){return response.data})};vm.setSorting=function(sort){$scope.refSort=sort},vm.reload=function(){vm.load(vm.currentPage())},vm.currentPage=function(){var page=0;return $scope.refCollection&&$scope.refCollection.page&&(page=$scope.refCollection.page.number),page},vm.createRequestParameters=function(page){var opts={size:$scope.size||null,page:page,sort:$scope.refSort};return angular.merge({},$scope.refParams||{},opts)},vm.load=function(page){var promiseFactory=defaultPromiseFactory;$scope.promiseFactory&&(promiseFactory=$scope.promiseFactory),$scope.$root.$broadcast("spring-data-rest.begin-fetch",page);var requestParameters=vm.createRequestParameters(page);promiseFactory(requestParameters).then(function(data){var hateoas=hateoas||void 0;$scope.refItems=[],$scope.refCollection={},$scope.refItems=hateoas?util.rest.collection(data):data._embedded.data,$scope.refCollection=data,$scope.pages=[],$scope.currentPage=""+page;for(var i=0,m=$scope.refCollection.page.totalPages;m>i;i++)$scope.pages.push(i);$scope.$root.$broadcast("spring-data-rest.end-fetch",page,$scope.refItems.length)})},activate()}],template:"<div ng-transclude></div>"}}),angular.module("springDataRestPagination",[]).directive("springDataRestPagination",function(){return{require:"^springDataRest",transclude:!1,scope:!1,template:"<span ng-show='$parent.refCollection.page.totalPages > 0 && $parent.refCollection.page.number != 0'><a href='#' ng-click='$parent.first()'>Erste Seite</a> | </span><span ng-show='$parent.refCollection.page.number > 0'><a href='#' ng-click='$parent.previous()', >&lt; Vorher</a> | </span><select ng-change='$parent.page($parent.currentPage)' ng-model='$parent.currentPage'><option ng-repeat='n in $parent.pages' value='{{n}}' ng-selected='n == $parent.currentPage'>Seite {{n + 1}}</option></select><span ng-show='($parent.refCollection.page.number + 1) < $parent.refCollection.page.totalPages'> | <a href='#' ng-click='$parent.next()'>Nächste &gt;</a></span> <span ng-show='$parent.refCollection.page.totalPages'>| <a href='#' ng-click='$parent.last()'>Letzte Seite</a></span>"}}),angular.module("springDataRestSort",[]).directive("springDataRestSort",function(){return{restrict:"A",scope:!0,require:"^springDataRest",link:function(scope,element,attrs,springDataRestController){if(scope.springDataRestController=springDataRestController,!attrs.property)throw"Attribute 'property' is required";if(scope.property=attrs.property,attrs.defaultDirection){var direction=attrs.defaultDirection.toLowerCase();scope.direction="desc"==direction?direction:"asc"}attrs.isDefault&&scope.refresh()},controller:["$scope","$http",function($scope,$http){function activate(){}$scope.refresh=function(){var sort=$scope.property;$scope.direction&&(sort+=","+$scope.direction),$scope.springDataRestController.setSorting(sort),$scope.springDataRestController.reload()},$scope.toggleDirection=function(noRefresh){var direction="asc";"asc"==$scope.direction&&(direction="desc"),$scope.direction=direction,noRefresh||$scope.refresh()},activate()}]}});var sprat=sprat||{};sprat.ui=sprat.ui||{},sprat.ui.batchRemove=function($items,$service,$opts){var toRemove=[],opts={confirm:function(items){return confirm("Sollen "+items.length+" Einträge gelöscht werden?")},lookupMethod:function(item){if(void 0===item.id)throw"You must provide the .id property in each item of the provided $items array";return item.selected===!0}};if(angular.isFunction($opts)&&(opts.confirm=$opts),angular.isObject($opts)&&angular.merge(opts,$opts),sprat.util.lookup($items,opts.lookupMethod,function(elem){toRemove.push(elem)}),toRemove.length<=0||!opts.confirm(toRemove))return!1;for(var i=0,m=toRemove.length;m>i;i++){var item=toRemove[i];$service.remove(item).then(function(data){sprat.util.array.removeById($items,item.id)})}return!0};var sprat=sprat||{};sprat.ui=sprat.ui||{},sprat.ui.validation=sprat.ui.validation||{},sprat.ui.validation.resetErrors=function($form,$errors,_fieldMapping){var field=null;_fieldMapping=_fieldMapping||[];for(var key in $errors)field=key,_fieldMapping[field]&&(field=_fieldMapping[field]),$form[field].$setValidity("server",!0),delete $errors[field]},sprat.ui.validation.parseErrors=function($form,$errors,data,_fieldMapping){_fieldMapping=_fieldMapping||[],ui.resetErrors($form,$errors,_fieldMapping);var error=null,field=null,code=null,message=null;if(data.errors)for(var idx in data.errors)error=data.errors[idx],field=error.field,_fieldMapping[field]&&(field=_fieldMapping[field]),code=error.code,message=error.defaultMessage||code,$errors[field]=message,$form[field].$setValidity("server",!1)},angular.module("treeOpen",[]).directive("treeOpen",function(){return{restrict:"E",scope:{path:"@"},link:function(scope,element,attrs){scope.$root.$broadcast("open-tree-path",scope.path)}}}),angular.module("treePath",[]).directive("treePath",function(){return{restrict:"A",scope:{treePath:"@"},link:function(scope,element,attrs){scope.$on("open-tree-path",function(event,args_path){var is_itself=args_path==scope.treePath,is_parent=args_path.slice(0,scope.treePath.length)==scope.treePath;is_itself||is_parent?element.addClass("active"):element.removeClass("active")})}}});